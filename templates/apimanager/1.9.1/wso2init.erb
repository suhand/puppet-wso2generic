#!/bin/bash
#
# chkconfig: 35 90 12
#
# Get function from functions library
#. /etc/init.d/functions
. /lib/lsb/init-functions


JAVA_HOME=/opt/java
PATH=$PATH:$JAVA_HOME/bin

USER="<%= @owner %>"
#USER="ubuntu"
PRODUCT_CODE="<%= @deployment_code %>"
#PRODUCT_CODE="application"
CARBON_HOME="<%= @carbon_home %>"
IP_ADDRESS=`hostname  -I | cut -f1 -d' '`
#CARBON_HOME="/mnt/${IP_ADDRESS}/wso2am-1.9.0"
LOCK_FILE="${CARBON_HOME}/wso2carbon.lck"
PID_FILE="${CARBON_HOME}/wso2carbon.pid"
CMD="${CARBON_HOME}/bin/wso2server.sh"

# Status the service
status() {
        if [ -f $PID_FILE ]
            then
                PID=`cat $PID_FILE`
                ps -fp $PID > /dev/null 2>&1
                PIDVAL=$?
            else
                PIDVAL=3
        fi

        if [ $PIDVAL -eq 0 ]
            then
                echo "WSO2 $PRODUCT_CODE server is running ..."
            else
                echo "WSO2 $PRODUCT_CODE server is stopped."
        fi
        return $PIDVAL
}


# Start the service
start() {
        if [ -f $PID_FILE ]
            then
                PID=`cat $PID_FILE`
                ps -fp $PID > /dev/null 2>&1
                PIDVAL=$?
            else
                PIDVAL=3
        fi

        if [ $PIDVAL -eq 0 ]
            then
               echo "WSO2 $PRODUCT_CODE server is running ..."
            else
               log_daemon_msg  "Starting WSO2 $PRODUCT_CODE server"
               touch $LOCK_FILE
               su - $USER -c "$CMD start > /dev/null 2>&1 &"
               sleep 5
               if [ -f $PID_FILE ]
                   then
                        PID=`cat $PID_FILE`
                        ps -fp $PID > /dev/null 2>&1
                        PIDVAL=$?
                        if [ $PIDVAL -eq 0 ]
                            then
                                log_end_msg 0
                            else
                                log_end_msg 1
                                #log_failure_msg $
                        fi
                   else
                        log_end_msg 1
                        #log_failure_msg $
                        PIDVAL=2
               fi
        fi
        return $PIDVAL
}

# Restart the service
restart() {
        log_daemon_msg "Restarting WSO2 $PRODUCT_CODE server"
        touch $LOCK_FILE
        su - $USER -c "$CMD restart > /dev/null 2>&1 &"
        sleep 15
        if [ -f $PID_FILE ]
            then
                PID=`cat $PID_FILE`
                ps -fp $PID > /dev/null 2>&1
                PIDVAL=$?
                if [ $PIDVAL -eq 0 ]
                    then
                        log_end_msg 0
                    else
                        log_end_msg 1
                fi
            else
                log_end_msg 1
                PIDVAL=2
        fi
        return $PIDVAL
}


# Stop the service
stop() {
        if [ -f $PID_FILE ]
            then
                PID=`cat $PID_FILE`
                ps -fp $PID > /dev/null 2>&1
                PIDVAL=$?
                if [ $PIDVAL -eq 0 ]
                    then
                        log_daemon_msg "Stopping WSO2 $PRODUCT_CODE server"
                        su - $USER -c "$CMD stop > /dev/null 2>&1 &"
                        rm -f $LOCK_FILE
                        sleep 10
                        PID=`cat $PID_FILE`
                        ps -fp $PID > /dev/null 2>&1
                        PIDVAL=$?
                        if [ $PIDVAL -eq 0 ]
                            then
                                log_end_msg 1
                                PIDVAL=2
                            else
                                log_end_msg 0
                                PIDVAL=0
                        fi
                    else
                       echo "WSO2 $PRODUCT_CODE server is not running."
                       PIDVAL=0
                fi
            else
               echo "WSO2 $PRODUCT_CODE server is not running."
               PIDVAL=0
        fi
        return $PIDVAL
}

### main logic ###
case "$1" in
start)
    start
    ;;
stop)
    stop
    ;;
status)
    status
    ;;
restart|reload|condrestart)
    restart
    ;;
*)
   echo $"Usage: $0 {start|stop|restart|reload|status}"
   exit 1
esac
exit $?
